name: 🧪 CarePro CI/CD Testing Pipeline

on:
  pull_request:
    branches: [ main, staging, development ]
    paths:
      - 'frontend/vite-project/**'
      - 'node-API/**'
      - '.github/workflows/**'
  push:
    branches: [ development ]
    paths:
      - 'frontend/vite-project/**'
      - 'node-API/**'

jobs:
  # MANDATORY TESTS - Must pass before any deployment
  mandatory-tests:
    name: 🚨 MANDATORY Security & Critical Tests
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: node-API/package-lock.json

    - name: Install dependencies
      working-directory: node-API
      run: npm ci

    - name: Setup test environment
      working-directory: node-API
      run: |
        echo "📁 Setting up test environment..."
        # Check what test files are actually available
        echo "🔍 Looking for test files outside node_modules:"
        find . -name "*.test.js" -not -path "./node_modules/*" -not -path "./coverage/*" | head -5 || echo "No .test.js files found"
        find . -name "*.spec.js" -not -path "./node_modules/*" -not -path "./coverage/*" | head -5 || echo "No .spec.js files found"

        # Check if __tests__ directory exists
        if [ ! -d "__tests__" ]; then
          echo "⚠️ __tests__ directory not found in CI environment"
          echo "📝 This might indicate the test files are not being copied to CI"
        else
          echo "✅ __tests__ directory found"
          ls -la __tests__/ | head -10
        fi

    - name: Run Security Tests (MANDATORY)
      working-directory: node-API
      run: npm run test:security --passWithNoTests
      env:
        NODE_ENV: test

    - name: Run Critical Controller Tests (MANDATORY)
      working-directory: node-API
      run: npm run test:unit -- --testPathPattern="controllers" --passWithNoTests
      env:
        NODE_ENV: test

    - name: Run Critical Integration Tests (MANDATORY)
      working-directory: node-API
      run: npm run test:integration -- --testPathPattern="critical" --passWithNoTests
      env:
        NODE_ENV: test

    - name: Generate Coverage Report with Thresholds (MANDATORY)
      working-directory: node-API
      run: |
        echo "🧪 Running coverage tests with updated thresholds..."
        echo "📁 Looking for test files outside node_modules:"
        find . -name "*.test.js" -not -path "./node_modules/*" -not -path "./coverage/*" | head -5 || echo "No test files found"
        echo "🔧 Running tests..."
        npm run test:coverage
        echo "✅ Coverage thresholds met"
      env:
        NODE_ENV: test

  # Full test suite - Required for staging/production
  complete-test-suite:
    name: 🧪 Complete Test Suite
    needs: mandatory-tests
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [16, 18, 20]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: node-API/package-lock.json

    - name: Install dependencies
      working-directory: node-API
      run: npm ci

    - name: Run all tests
      working-directory: node-API
      run: npm run test:ci
      env:
        NODE_ENV: test

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        directory: node-API/coverage
        flags: node-api

  # Security audit - Must pass for production
  security-audit:
    name: 🔒 Security Audit
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: node-API/package-lock.json

    - name: Install dependencies
      working-directory: node-API
      run: npm ci

    - name: Run security audit
      working-directory: node-API
      run: npm audit --audit-level high

    - name: Check for known vulnerabilities
      working-directory: node-API
      run: npx audit-ci --moderate

  # 🎯 PR VALIDATION SUMMARY
  pr-validation-summary:
    name: 🎯 PR Validation Summary
    needs: [mandatory-tests, complete-test-suite, security-audit]
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
    - name: 🎯 PR Validation Complete
      run: |
        echo "🎯 PULL REQUEST VALIDATION COMPLETED"
        echo "===================================="
        echo "✅ All mandatory tests passed"
        echo "✅ Security tests: PASSED"
        echo "✅ Critical controller tests: PASSED"
        echo "✅ Integration tests: PASSED"
        echo "✅ Coverage thresholds: MET"
        echo "✅ Security audit: PASSED"
        echo ""
        echo "🚀 This PR is ready to be merged!"
        echo "📋 Deployment will happen via dedicated deployment workflows"

  # 🧪 DEVELOPMENT BUILD VALIDATION
  dev-build-validation:
    name: 🧪 Development Build Validation
    needs: [mandatory-tests, complete-test-suite, security-audit]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'

    steps:
    - name: 🧪 Development Validation Complete
      run: |
        echo "🧪 DEVELOPMENT BUILD VALIDATION COMPLETED"
        echo "========================================"
        echo "✅ All tests passed on develop branch"
        echo "✅ Code is ready for staging deployment"
        echo "� Use staging deployment workflow for actual deployment"

  # Notification on failure
  notify-failure:
    name: 📢 Notify on Failure
    needs: [mandatory-tests, complete-test-suite, security-audit]
    runs-on: ubuntu-latest
    if: failure()

    steps:
    - name: Notify team of test failures
      run: |
        echo "❌ MANDATORY TESTS FAILED"
        echo "🚫 Deployment blocked until all mandatory tests pass"
        echo "🔍 Check the following areas:"
        echo "   - Security vulnerabilities"
        echo "   - Authentication/authorization"
        echo "   - Input validation"
        echo "   - Rate limiting"
        echo "   - Error handling"
        echo "   - Code coverage thresholds"
