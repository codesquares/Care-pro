import React, { useState, useEffect } from "react";
import { Link } from "react-router-dom";
import "./user-profile.css";
import "./client-profile-fix.css"; // Import client-specific fixes
import "./component-reset.css"; // Import component-specific reset styles
import ProfileHeader from "./ProfileHeader";
import OrderHistory from "./OrderHistory";
import ProfileInformation from "./ProfileInformation";
import ClientPreferences from "./ClientPreferences";
import axios from "axios";

/**
 * Client User Profile component
 * Displays the client's profile information, order history,
 * and verification status
 */
const UserProfile = () => {
  const [clientData, setClientData] = useState({
    firstName: "",
    lastName: "",
    email: "",
    phoneNumber: "",
    profilePicture: "",
    aboutMe: "",
    isVerified: false,
    preferredServices: [],
    joinDate: ""
  });
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState("");

  const userDetails = JSON.parse(localStorage.getItem("userDetails") || "{}");
  
  useEffect(() => {
    const fetchClientData = async () => {
      try {
        setLoading(true);
        const response = await axios.get(
          `https://carepro-api20241118153443.azurewebsites.net/api/Clients/${userDetails.id}`
        );
        
        if (response.data) {
          setClientData({
            firstName: response.data.firstName || "",
            lastName: response.data.lastName || "",
            email: response.data.email || "",
            phoneNumber: response.data.phoneNumber || "",
            profilePicture: response.data.profilePicture || "",
            aboutMe: response.data.aboutMe || "Tell others about yourself and your service needs.",
            isVerified: response.data.isVerified || false,
            preferredServices: response.data.preferredServices || [],
            joinDate: response.data.joinDate || new Date().toISOString()
          });
        }
      } catch (error) {
        console.error("Error fetching client data:", error);
        setError("Failed to load profile data");
      } finally {
        setLoading(false);
      }
    };

    if (userDetails && userDetails.id) {
      fetchClientData();
    } else {
      setLoading(false);
      setError("User information not available");
    }
  }, [userDetails.id]);

  const handleUpdateAboutMe = (newAboutMe) => {
    setClientData(prev => ({
      ...prev,
      aboutMe: newAboutMe
    }));
  };

  const handleUpdatePreferences = (newPreferences) => {
    setClientData(prev => ({
      ...prev,
      preferredServices: newPreferences
    }));
  };

  if (loading) {
    return <div className="user-profile-loading">Loading profile...</div>;
  }

  if (error) {
    return <div className="user-profile-error">{error}</div>;
  }

  return (
    <div className="user-profile-container client-profile-page">
      <div className="profile-header-with-actions">
        <h2 className="profile-page-title">My Profile</h2>
        <div className="profile-actions">
          <Link to="/app/client/verifications" className="action-link">
            <button className={`action-button ${clientData.isVerified ? 'verified' : ''}`}>
              {clientData.isVerified ? "âœ“ Verified" : "Get Verified"}
            </button>
          </Link>
          <Link to="/app/client/settings" className="action-link">
            <button className="action-button">Account Settings</button>
          </Link>
        </div>
      </div>
      
      <div className="user-profile">
        <ProfileHeader 
          firstName={clientData.firstName}
          lastName={clientData.lastName}
          email={clientData.email}
          phoneNumber={clientData.phoneNumber}
          profilePicture={clientData.profilePicture}
          isVerified={clientData.isVerified}
          joinDate={clientData.joinDate}
        />
        
        <div className="user-profile-section">
          <ProfileInformation 
            profileDescription={clientData.aboutMe}
            onUpdate={handleUpdateAboutMe}
            services={clientData.preferredServices}
            onUpdatePreferences={handleUpdatePreferences}
          />
        </div>
        
        <div className="user-profile-section">
          <ClientPreferences clientId={userDetails.id} />
        </div>
        
        <div className="user-profile-section">
          <OrderHistory clientId={userDetails.id} />
        </div>
      </div>
    </div>
  );
};

export default UserProfile;
