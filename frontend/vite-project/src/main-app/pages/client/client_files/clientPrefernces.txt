import React, { useState, useEffect } from 'react';
import './ClientPreferences-enhanced.css';
import clientPreferenceService from '../../../services/clientPreferenceService';

/**
 * ClientPreferences component for managing client service preferences and recommendations
 * This component leverages the clientAI service to provide personalized recommendations
 */
const ClientPreferences = ({ clientId }) => {
  const [preferences, setPreferences] = useState({
    serviceType: '',
    location: '',
    schedule: '',
    needs: ''
  });
  
  const [recommendations, setRecommendations] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [success, setSuccess] = useState(null);
  const [offlineMode, setOfflineMode] = useState(false);
  
  const serviceTypes = [
    'Home Care',
    'Elder Care',
    'Child Care',
    'Post-Surgery Care',
    'Special Needs Care',
    'Pet Care',
    'Rehabilitation'
  ];
  
  // Fetch client's current preferences
  useEffect(() => {
    const fetchPreferences = async () => {
      if (!clientId) return;
      
      try {
        setLoading(true);
        const fetchedPreferences = await clientPreferenceService.getPreferences(clientId);
        setPreferences(fetchedPreferences);
        
        // Check if we're using local storage (offline mode)
        const storedPreferences = localStorage.getItem(`client_preferences_${clientId}`);
        if (storedPreferences) {
          setOfflineMode(true);
        }
      } catch (err) {
        console.error('Error fetching client preferences:', err);
        setError('Failed to load your preferences. Please try again later.');
      } finally {
        setLoading(false);
      }
    };
    
    fetchPreferences();
  }, [clientId]);
  
  // Handle form changes
  const handleChange = (e) => {
    const { name, value } = e.target;
    setPreferences(prev => ({
      ...prev,
      [name]: value
    }));
  };
  
  // Get recommendations based on preferences
  const getRecommendations = async () => {
    try {
      setLoading(true);
      setError(null);
      
      const recommendedCaregivers = await clientPreferenceService.getRecommendations(clientId, preferences);
      setRecommendations(recommendedCaregivers);
      
      setSuccess('Recommendations updated successfully!');
      
      // Automatically clear success message after 3 seconds
      setTimeout(() => {
        setSuccess(null);
      }, 3000);
    } catch (err) {
      console.error('Error getting recommendations:', err);
      setError('Failed to get recommendations. Please try again later.');
    } finally {
      setLoading(false);
    }
  };
  
  // Save preferences to the database
  const savePreferences = async () => {
    try {
      setLoading(true);
      setError(null);
      
      const result = await clientPreferenceService.savePreferences(clientId, preferences);
      
      if (result.isOffline) {
        setOfflineMode(true);
      }
      
      setSuccess('Your preferences have been saved successfully!');
      
      // Get updated recommendations after saving preferences
      await getRecommendations();
      
      // Automatically clear success message after 3 seconds
      setTimeout(() => {
        setSuccess(null);
      }, 3000);
    } catch (err) {
      console.error('Error saving preferences:', err);
      setError('Failed to save your preferences. Please try again later.');
    } finally {
      setLoading(false);
    }
  };
  
  const viewProfile = (id) => {
    // Implement view profile functionality
    window.location.href = `/app/client/service/${id}`;
  };

  return (
    <div className="client-preferences">
      <h3>Care Preferences & Recommendations</h3>
      
      {loading && <div className="preferences-loading">Loading...</div>}
      
      {error && <div className="preferences-error">{error}</div>}
      
      {success && <div className="preferences-success">{success}</div>}
      
      {offlineMode && (
        <div className="offline-mode-notice">
          <i className="fas fa-info-circle"></i> You're currently in offline mode. Your preferences are saved locally and will sync when you're back online.
        </div>
      )}
      
      <form className="preferences-form">
        <div className="form-group">
          <label htmlFor="serviceType">Preferred Service Type</label>
          <select 
            id="serviceType" 
            name="serviceType" 
            value={preferences.serviceType} 
            onChange={handleChange}
            className="form-control"
          >
            <option value="">Select a service type</option>
            {serviceTypes.map(type => (
              <option key={type} value={type}>{type}</option>
            ))}
          </select>
        </div>
        
        <div className="form-group">
          <label htmlFor="location">Preferred Location</label>
          <input 
            type="text" 
            id="location" 
            name="location" 
            placeholder="Enter your preferred location"
            value={preferences.location} 
            onChange={handleChange}
            className="form-control"
          />
        </div>
        
        <div className="form-group">
          <label htmlFor="schedule">Preferred Schedule</label>
          <input 
            type="text" 
            id="schedule" 
            name="schedule" 
            placeholder="E.g., Weekdays, Mornings, 24/7"
            value={preferences.schedule} 
            onChange={handleChange}
            className="form-control"
          />
        </div>
        
        <div className="form-group">
          <label htmlFor="needs">Special Needs or Requirements</label>
          <textarea 
            id="needs" 
            name="needs" 
            placeholder="Describe any special needs or requirements"
            value={preferences.needs} 
            onChange={handleChange}
            className="form-control"
            rows="3"
          ></textarea>
        </div>
        
        <div className="preferences-actions">
          <button 
            type="button" 
            onClick={savePreferences} 
            className="save-preferences-btn"
            disabled={loading}
          >
            {loading ? 'Saving...' : 'Save Preferences'}
          </button>
          
          <button 
            type="button" 
            onClick={getRecommendations} 
            className="save-preferences-btn"
            disabled={loading}
            style={{ marginLeft: '10px', backgroundColor: '#4CAF50' }}
          >
            Get Recommendations
          </button>
        </div>
      </form>
      
      {recommendations.length > 0 && (
        <div className="recommendations-section">
          <h4>Recommended Caregivers</h4>
          <div className="recommendations-list">
            {recommendations.map((recommendation, index) => (
              <div key={index} className="recommendation-card">
                <img 
                  src={recommendation.profilePicture || 'https://via.placeholder.com/300x160'} 
                  alt={recommendation.name} 
                  className="caregiver-image" 
                />
                <div className="caregiver-info">
                  <h5 className="caregiver-name">{recommendation.name}</h5>
                  <p className="caregiver-specialty">{recommendation.serviceType}</p>
                  <div className="caregiver-rating">
                    <span className="rating-stars">
                      {Array(Math.round(recommendation.rating || 0)).fill().map((_, i) => (
                        <span key={i}>★</span>
                      ))}
                    </span>
                    <span className="rating-value">{recommendation.rating || 0}</span>
                  </div>
                  <p className="caregiver-description">
                    {recommendation.location} • {recommendation.experience || '2+ years'} experience
                  </p>
                  <p className="match-score">
                    <span className="match-label">Match Score:</span> {recommendation.matchScore}%
                  </p>
                  <button 
                    className="view-profile-btn"
                    onClick={() => viewProfile(recommendation.id)}
                  >
                    View Profile
                  </button>
                </div>
              </div>
            ))}
          </div>
        </div>
      )}
    </div>
  );
};

export default ClientPreferences;
