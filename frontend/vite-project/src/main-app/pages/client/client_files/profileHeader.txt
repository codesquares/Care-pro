import React, { useEffect, useState } from "react";
import { useNavigate } from "react-router-dom";
import "./profile-header.css";
import defaultAvatar from '../../../../assets/profilecard1.png';
import VerifyButton from "./VerifyButton";
import ClientOrderService from "../../../services/clientOrderService";

const ProfileHeader = ({ 
  firstName = "", 
  lastName = "", 
  email = "", 
  phoneNumber = "", 
  profilePicture = "", 
  isVerified = false,
  joinDate = "" 
}) => {
  const [stats, setStats] = useState({
    totalSpent: 0,
    ordersCount: 0
  });
  const [loading, setLoading] = useState(true);
  const navigate = useNavigate();
  
  const userDetails = JSON.parse(localStorage.getItem("userDetails") || "{}");
  const formattedJoinDate = new Date(joinDate).toLocaleDateString('en-US', {
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  });

  useEffect(() => {
    const fetchClientStats = async () => {
      if (!userDetails.id) return;
      
      try {
        setLoading(true);
        
        // Use ClientOrderService to fetch order history
        const orders = await ClientOrderService.getOrderHistory(userDetails.id);
        
        if (orders && orders.length > 0) {
          // Calculate metrics using ClientOrderService
          const metrics = ClientOrderService.calculateSpendingMetrics(orders);
          
          setStats({
            totalSpent: metrics.total || 0,
            ordersCount: orders.length || 0
          });
        }
      } catch (err) {
        console.error("Error fetching client stats:", err);
      } finally {
        setLoading(false);
      }
    };

    fetchClientStats();
  }, [userDetails.id]);

  const handleVerifyClick = () => {
    navigate("/app/client/verifications");
  };

  return (
    <div className="profile-header">
      <div className="profile-banner"></div>
      <div className="profile-info-container">
        <div className="profile-image-container">
          <img 
            src={profilePicture || defaultAvatar} 
            alt={`${firstName} ${lastName}`} 
            className="profile-image" 
          />
          {isVerified && (
            <div className="verification-badge" title="Verified Account">
              <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                <path d="M22 11.08V12a10 10 0 1 1-5.93-9.14"></path>
                <polyline points="22 4 12 14.01 9 11.01"></polyline>
              </svg>
            </div>
          )}
        </div>
        
        <div className="profile-details">
          <div className="profile-name-section">
            <h2 className="profile-name">{firstName} {lastName}</h2>
            {!isVerified && <VerifyButton verificationStatus="unverified" />}
            <button 
              className="settings-button"
              onClick={() => navigate("/app/client/settings")}
              title="Edit your account settings"
            >
              <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                <circle cx="12" cy="12" r="3"></circle>
                <path d="M19.4 15a1.65 1.65 0 0 0 .33 1.82l.06.06a2 2 0 0 1 0 2.83 2 2 0 0 1-2.83 0l-.06-.06a1.65 1.65 0 0 0-1.82-.33 1.65 1.65 0 0 0-1 1.51V21a2 2 0 0 1-2 2 2 2 0 0 1-2-2v-.09A1.65 1.65 0 0 0 9 19.4a1.65 1.65 0 0 0-1.82.33l-.06.06a2 2 0 0 1-2.83 0 2 2 0 0 1 0-2.83l.06-.06a1.65 1.65 0 0 0 .33-1.82 1.65 1.65 0 0 0-1.51-1H3a2 2 0 0 1-2-2 2 2 0 0 1 2-2h.09A1.65 1.65 0 0 0 4.6 9a1.65 1.65 0 0 0-.33-1.82l-.06-.06a2 2 0 0 1 0-2.83 2 2 0 0 1 2.83 0l.06.06a1.65 1.65 0 0 0 1.82.33H9a1.65 1.65 0 0 0 1-1.51V3a2 2 0 0 1 2-2 2 2 0 0 1 2 2v.09a1.65 1.65 0 0 0 1 1.51 1.65 1.65 0 0 0 1.82-.33l.06-.06a2 2 0 0 1 2.83 0 2 2 0 0 1 0 2.83l-.06.06a1.65 1.65 0 0 0-.33 1.82V9a1.65 1.65 0 0 0 1.51 1H21a2 2 0 0 1 2 2 2 2 0 0 1-2 2h-.09a1.65 1.65 0 0 0-1.51 1z"></path>
              </svg>
              Settings
            </button>
          </div>
          
          <div className="profile-contact">
            <div className="contact-item">
              <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                <path d="M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"></path>
              </svg>
              <span>{phoneNumber || "No phone number"}</span>
            </div>
            <div className="contact-item">
              <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                <path d="M4 4h16c1.1 0 2 .9 2 2v12c0 1.1-.9 2-2 2H4c-1.1 0-2-.9-2-2V6c0-1.1.9-2 2-2z"></path>
                <polyline points="22,6 12,13 2,6"></polyline>
              </svg>
              <span>{email || "No email available"}</span>
            </div>
            <div className="contact-item">
              <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                <rect x="3" y="4" width="18" height="18" rx="2" ry="2"></rect>
                <line x1="16" y1="2" x2="16" y2="6"></line>
                <line x1="8" y1="2" x2="8" y2="6"></line>
                <line x1="3" y1="10" x2="21" y2="10"></line>
              </svg>
              <span>Member since {formattedJoinDate}</span>
            </div>
          </div>
          
          <div className="profile-stats">
            <div className="stat-item">
              <h3>{loading ? "..." : stats.ordersCount}</h3>
              <p>Orders</p>
            </div>
            <div className="stat-item">
              <h3>â‚¦{loading ? "..." : stats.totalSpent.toLocaleString(undefined, { maximumFractionDigits: 2 })}</h3>
              <p>Total Spent</p>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default ProfileHeader;
