import React, { useEffect, useState } from 'react';
import { useNavigate } from 'react-router-dom';
import './order-history-enhanced.css';
import ClientOrderService from '../../../services/clientOrderService';

/**
 * OrderHistory component displays the client's order history and total spending
 * It shows a summary of expenses and a detailed list of orders
 */
const OrderHistory = ({ clientId }) => {
  const [orders, setOrders] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState('');
  const [spendingMetrics, setSpendingMetrics] = useState({
    total: 0,
    thisMonth: 0,
    lastMonth: 0,
    average: 0,
    categories: {}
  });
  const navigate = useNavigate();

  useEffect(() => {
    const fetchOrders = async () => {
      try {
        if (!clientId) {
          const userDetails = JSON.parse(localStorage.getItem("userDetails") || "{}");
          if (!userDetails.id) {
            throw new Error("No client ID found in local storage.");
          }
          clientId = userDetails.id;
        }

        // Use our service to fetch orders
        const ordersData = await ClientOrderService.getOrderHistory(clientId);
        setOrders(ordersData);
        
        // Calculate spending metrics
        const metrics = ClientOrderService.calculateSpendingMetrics(ordersData);
        setSpendingMetrics(metrics);
        
        setIsLoading(false);
      } catch (err) {
        console.error('Failed to fetch order history:', err);
        setError('Failed to load order history. Please try again later.');
        setIsLoading(false);
      }
    };

    fetchOrders();
  }, [clientId]);

  const handleViewOrder = (orderId) => {
    navigate(`/my-order/${orderId}`);
  };

  return (
    <div className="order-history">
      <h3>Order History</h3>
      
      {isLoading ? (
        <div className="order-loading">Loading order history...</div>
      ) : error ? (
        <div className="order-error">{error}</div>
      ) : (
        <>
          <div className="expense-summary">
            <div className="total-expense">
              <h4>Total Spending</h4>
              <p className="amount">₦{spendingMetrics.total.toLocaleString()}</p>
            </div>
            
            <div className="monthly-expenses">
              <div className="expense-card">
                <h5>This Month</h5>
                <p className="amount">₦{spendingMetrics.thisMonth.toLocaleString()}</p>
              </div>
              
              <div className="expense-card">
                <h5>Last Month</h5>
                <p className="amount">₦{spendingMetrics.lastMonth.toLocaleString()}</p>
              </div>
              
              <div className="expense-card">
                <h5>Average Order</h5>
                <p className="amount">₦{spendingMetrics.average.toLocaleString(undefined, { maximumFractionDigits: 2 })}</p>
              </div>
            </div>
          </div>
          
          {/* Categories spending summary if available */}
          {Object.keys(spendingMetrics.categories).length > 0 && (
            <div className="categories-summary">
              <h4>Spending by Category</h4>
              <div className="category-bars">
                {Object.entries(spendingMetrics.categories).map(([category, amount]) => (
                  <div key={category} className="category-bar">
                    <div className="category-name">{category}</div>
                    <div className="bar-container">
                      <div 
                        className="bar" 
                        style={{ 
                          width: `${Math.min(100, (amount / spendingMetrics.total) * 100)}%` 
                        }}
                      ></div>
                    </div>
                    <div className="category-amount">₦{amount.toLocaleString()}</div>
                  </div>
                ))}
              </div>
            </div>
          )}
          
          {orders.length > 0 ? (
            <div className="orders-table-container">
              <table className="orders-table">
                <thead>
                  <tr>
                    <th>Date</th>
                    <th>Service</th>
                    <th>Caregiver</th>
                    <th>Amount</th>
                    <th>Status</th>
                    <th>Action</th>
                  </tr>
                </thead>
                <tbody>
                  {orders.map(order => (
                    <tr key={order.id} className="order-row">
                      <td>{new Date(order.createdAt || order.orderDate).toLocaleDateString()}</td>
                      <td>{order.serviceName || 'N/A'}</td>
                      <td>{order.caregiverName || 'N/A'}</td>
                      <td>₦{(order.amount || 0).toLocaleString()}</td>
                      <td>
                        <span className={`status status-${order.status?.toLowerCase()}`}>
                          {order.status || 'N/A'}
                        </span>
                      </td>
                      <td>
                        <button 
                          className="view-order-btn"
                          onClick={() => handleViewOrder(order.id)}
                        >
                          View
                        </button>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          ) : (
            <div className="no-orders">
              <p>You haven't placed any orders yet.</p>
              <button 
                className="browse-services-btn"
                onClick={() => navigate('/dashboard')}
              >
                Browse Services
              </button>
            </div>
          )}
        </>
      )}
    </div>
  );
};

export default OrderHistory;
