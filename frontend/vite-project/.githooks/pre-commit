#!/bin/bash

# Frontend Pre-commit Hook - CarePro Vite Project
# This script runs before every commit to ensure code quality and prevent broken code from entering the repository

set -e  # Exit on any error

# Color codes for better output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Get the project directory (frontend/vite-project)
PROJECT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
echo -e "${BLUE}üèóÔ∏è  Running Frontend Pre-commit Checks in: $PROJECT_DIR${NC}"

# Change to project directory
cd "$PROJECT_DIR"

# Function to print section headers
print_section() {
    echo
    echo -e "${BLUE}$1${NC}"
    echo "=================================================="
}

# Function to handle errors
handle_error() {
    echo -e "${RED}‚ùå Pre-commit check failed: $1${NC}"
    echo -e "${RED}üö´ COMMIT REJECTED - Please fix the issues above before committing${NC}"
    exit 1
}

print_section "üîç 1. LINTING CHECK (ERRORS ONLY)"
echo -e "${YELLOW}Running ESLint to check for critical issues...${NC}"
if npm run lint -- --max-warnings 0 --quiet; then
    echo -e "${GREEN}‚úÖ No linting errors found${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  Running full lint check to show all issues...${NC}"
    npm run lint || true  # Show all issues but don't fail
    # Only fail on actual errors, not warnings
    if npm run lint -- --max-warnings 999999 --quiet; then
        echo -e "${YELLOW}‚ö†Ô∏è  Linting warnings found but no errors - continuing${NC}"
    else
        handle_error "Linting errors found - commit blocked until critical errors are fixed"
    fi
fi

print_section "üß™ 2. RUNNING TESTS (REQUIRED)"
echo -e "${YELLOW}Running Jest tests...${NC}"
if npm test -- --passWithNoTests --watchAll=false; then
    echo -e "${GREEN}‚úÖ All tests passed${NC}"
else
    handle_error "Tests failed - commit blocked until all tests pass"
fi

print_section "üèóÔ∏è  3. BUILD CHECK"
echo -e "${YELLOW}Checking if the project builds successfully...${NC}"
if npm run build; then
    echo -e "${GREEN}‚úÖ Build successful${NC}"
    # Clean up build directory to keep repo clean
    rm -rf dist/
else
    handle_error "Build failed"
fi

print_section "üîí 4. SECURITY AUDIT"
echo -e "${YELLOW}Running npm security audit...${NC}"
if npm audit --audit-level=high; then
    echo -e "${GREEN}‚úÖ No high-severity security vulnerabilities found${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  Security vulnerabilities detected. Please review and fix.${NC}"
    echo -e "${YELLOW}üí° Run 'npm audit fix' to automatically fix issues${NC}"
    handle_error "Security audit failed"
fi

print_section "üì¶ 5. DEPENDENCY CHECK"
echo -e "${YELLOW}Checking for missing dependencies...${NC}"
if npm ls --depth=0 > /dev/null 2>&1; then
    echo -e "${GREEN}‚úÖ All dependencies are properly installed${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  Some dependencies might be missing or outdated${NC}"
    echo -e "${YELLOW}üí° Run 'npm install --legacy-peer-deps' to fix dependency issues${NC}"
    handle_error "Dependency check failed"
fi

print_section "üéØ 6. TYPESCRIPT CHECK (if applicable)"
if [ -f "tsconfig.json" ]; then
    echo -e "${YELLOW}Running TypeScript type checking...${NC}"
    if npx tsc --noEmit; then
        echo -e "${GREEN}‚úÖ TypeScript check passed${NC}"
    else
        handle_error "TypeScript type checking failed"
    fi
else
    echo -e "${YELLOW}üìù No tsconfig.json found, skipping TypeScript check${NC}"
fi

# Final success message
echo
echo -e "${GREEN}üéâ ALL PRE-COMMIT CHECKS PASSED!${NC}"
echo -e "${GREEN}‚úÖ Your frontend code is ready to be committed${NC}"
echo -e "${BLUE}üìã Summary of checks completed:${NC}"
echo -e "   ‚Ä¢ Code linting (ESLint) - ERRORS BLOCKED, WARNINGS ALLOWED"
echo -e "   ‚Ä¢ Unit/Integration tests (Jest) - REQUIRED"
echo -e "   ‚Ä¢ Build verification (Vite) - REQUIRED"
echo -e "   ‚Ä¢ Security audit (npm audit) - REQUIRED"
echo -e "   ‚Ä¢ Dependency verification - REQUIRED"
echo -e "   ‚Ä¢ TypeScript type checking - REQUIRED"
echo
