#!/bin/bash

# Root-Level Pre-commit Hook - CarePro Monorepo
# This script runs before every commit from the root directory and intelligently 
# runs the appropriate checks based on which files have been changed

set -e  # Exit on any error

# Color codes for better output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m' # No Color

# Get the project root directory
PROJECT_ROOT="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
echo -e "${BLUE}🏗️  Running CarePro Monorepo Pre-commit Checks in: $PROJECT_ROOT${NC}"

# Function to print section headers
print_section() {
    echo
    echo -e "${BLUE}$1${NC}"
    echo "=================================================="
}

# Function to handle errors
handle_error() {
    echo -e "${RED}❌ Pre-commit check failed: $1${NC}"
    echo -e "${RED}🚫 COMMIT REJECTED - Please fix the issues above before committing${NC}"
    exit 1
}

# Function to check if files in a directory have changed
files_changed_in_dir() {
    local dir=$1
    # Get list of staged files and check if any are in the specified directory
    git diff --cached --name-only | grep -q "^${dir}/" 2>/dev/null
}

# Initialize flags
FRONTEND_CHANGED=false
BACKEND_CHANGED=false
NODE_API_CHANGED=false
ROOT_CHANGED=false

# Check what has changed
if files_changed_in_dir "frontend"; then
    FRONTEND_CHANGED=true
    echo -e "${PURPLE}📁 Frontend changes detected${NC}"
fi

if files_changed_in_dir "backend"; then
    BACKEND_CHANGED=true
    echo -e "${PURPLE}📁 Backend changes detected${NC}"
fi

if files_changed_in_dir "node-API"; then
    NODE_API_CHANGED=true
    echo -e "${PURPLE}📁 Node-API changes detected${NC}"
fi

# Check for root-level changes (README, package.json, etc.)
if git diff --cached --name-only | grep -v -E "^(frontend|backend|node-API)/" | grep -q .; then
    ROOT_CHANGED=true
    echo -e "${PURPLE}📁 Root-level changes detected${NC}"
fi

# If no changes detected, something might be wrong
if ! $FRONTEND_CHANGED && ! $BACKEND_CHANGED && ! $NODE_API_CHANGED && ! $ROOT_CHANGED; then
    echo -e "${YELLOW}⚠️  No changes detected in staged files. Make sure you've staged your changes with 'git add'${NC}"
fi

# Initialize success tracking
CHECKS_RAN=0
CHECKS_PASSED=0

print_section "🔍 RUNNING PROJECT-SPECIFIC CHECKS"

# Run Node-API checks if changes detected
if $NODE_API_CHANGED; then
    echo -e "${YELLOW}🚀 Running Node-API checks...${NC}"
    if [ -f "$PROJECT_ROOT/node-API/.githooks/pre-commit" ]; then
        cd "$PROJECT_ROOT/node-API"
        if bash ./.githooks/pre-commit; then
            echo -e "${GREEN}✅ Node-API checks passed${NC}"
            CHECKS_PASSED=$((CHECKS_PASSED + 1))
        else
            cd "$PROJECT_ROOT"
            handle_error "Node-API checks failed"
        fi
        CHECKS_RAN=$((CHECKS_RAN + 1))
        cd "$PROJECT_ROOT"
    else
        echo -e "${YELLOW}⚠️  Node-API pre-commit hook not found at: $PROJECT_ROOT/node-API/.githooks/pre-commit${NC}"
    fi
fi

# Run Frontend checks if changes detected
if $FRONTEND_CHANGED; then
    echo -e "${YELLOW}🎨 Running Frontend checks...${NC}"
    if [ -f "$PROJECT_ROOT/frontend/vite-project/.githooks/pre-commit" ]; then
        cd "$PROJECT_ROOT/frontend/vite-project"
        if bash ./.githooks/pre-commit; then
            echo -e "${GREEN}✅ Frontend checks passed${NC}"
            CHECKS_PASSED=$((CHECKS_PASSED + 1))
        else
            cd "$PROJECT_ROOT"
            handle_error "Frontend checks failed"
        fi
        CHECKS_RAN=$((CHECKS_RAN + 1))
        cd "$PROJECT_ROOT"
    else
        echo -e "${YELLOW}⚠️  Frontend pre-commit hook not found at: $PROJECT_ROOT/frontend/vite-project/.githooks/pre-commit${NC}"
    fi
fi

# Run Backend checks if changes detected
if $BACKEND_CHANGED; then
    echo -e "${YELLOW}🏛️  Running Backend (.NET) checks...${NC}"
    if [ -f "$PROJECT_ROOT/backend/.githooks/pre-commit" ]; then
        cd "$PROJECT_ROOT/backend"
        if bash ./.githooks/pre-commit; then
            echo -e "${GREEN}✅ Backend checks passed${NC}"
            CHECKS_PASSED=$((CHECKS_PASSED + 1))
        else
            cd "$PROJECT_ROOT"
            handle_error "Backend checks failed"
        fi
        CHECKS_RAN=$((CHECKS_RAN + 1))
        cd "$PROJECT_ROOT"
    else
        echo -e "${YELLOW}⚠️  Backend pre-commit hook not found (you may need to create one for .NET)${NC}"
        echo -e "${BLUE}💡 Backend changes detected but no validation available${NC}"
    fi
fi

# Run root-level checks if needed
if $ROOT_CHANGED; then
    print_section "📋 ROOT-LEVEL VALIDATION"
    echo -e "${YELLOW}Validating root-level changes...${NC}"
    
    # Check if important files are properly formatted
    if git diff --cached --name-only | grep -E "\.(md|json)$" > /dev/null; then
        echo -e "${BLUE}📝 Documentation/config files changed - basic validation${NC}"
        
        # Basic JSON validation for any JSON files
        for file in $(git diff --cached --name-only | grep "\.json$"); do
            if [ -f "$file" ]; then
                if python3 -m json.tool "$file" > /dev/null 2>&1; then
                    echo -e "${GREEN}✅ $file is valid JSON${NC}"
                else
                    handle_error "$file contains invalid JSON"
                fi
            fi
        done
    fi
    
    CHECKS_RAN=$((CHECKS_RAN + 1))
    CHECKS_PASSED=$((CHECKS_PASSED + 1))
fi

# Final success message
print_section "🎉 COMMIT VALIDATION COMPLETE"
echo -e "${GREEN}✅ All checks passed ($CHECKS_PASSED/$CHECKS_RAN)${NC}"
echo

if $NODE_API_CHANGED; then
    echo -e "   🚀 Node-API: Tests, linting, and security checks passed"
fi

if $FRONTEND_CHANGED; then
    echo -e "   🎨 Frontend: Build, tests, linting, and security checks passed"
fi

if $BACKEND_CHANGED; then
    echo -e "   🏛️  Backend: Validation completed"
fi

if $ROOT_CHANGED; then
    echo -e "   📋 Root: Documentation and configuration validated"
fi

echo
echo -e "${GREEN}🚀 Your code is ready for deployment!${NC}"
echo -e "${BLUE}📊 Changes will be validated again in CI/CD pipeline${NC}"
echo
